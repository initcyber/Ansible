---
- hosts: proxmox
  gather_facts: no
  vars:
    base_id: 8000
    base_name: debian12-cloud
    auth:
      user: "{{ lookup('hashi_vault', 'secret=secret/auth:user') }}"
      password: "{{ lookup('hashi_vault', 'secret=secret/auth:pass') }}"
      public_ssh_key: "{{ lookup('hashi_vault', 'secret=secret/auth:ssh_public_key') }}"
    cloud_image_url: https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2
    cloud_image_filename: debian-12-generic-amd64.qcow2
    vm_list:
      - id: 135
        name: yoshi
        disk_size: 10G
        net0: virtio,bridge=vmbr0,tag=105
        ipconfig0: 'ip=dhcp'
        cores: 4
      - id: 136
        name: bowser
        disk_size: 15G
        net0: virtio,bridge=vmbr0,tag=110
        ipconfig0: 'ip=dhcp'
        #ipconfig0: 'ip=192.168.1.10/24,gw=192.168.1.1'
        memory: 4096
      # Add more VMs to clone as needed
  tasks:
    - name: Check if base VM already exists
      ansible.builtin.shell: 'qm status {{ base_id }}'
      register: result
      ignore_errors: true

    - name: 'Setup Cloud-VM with image {{ cloud_image_filename }}'
      tags: install-cloud-image
      block:
        - name: Download cloud image
          ansible.builtin.get_url:
            url: '{{ cloud_image_url }}'
            dest: '/tmp/{{ cloud_image_filename }}'

        - name: Create public-ssh-key
          ansible.builtin.copy:
            content: '{{ auth.public_ssh_key }}'
            dest: '/tmp/public-ssh-key.pub'

        - name: Create VM
          ansible.builtin.shell: 'qm create {{ base_id }} --name {{ base_name }} --memory 2048 --core 2 --net0 virtio,bridge=vmbr0'

        - name: Import disk to VM
          ansible.builtin.shell: 'qm importdisk {{ base_id }} /tmp/{{ cloud_image_filename }} local-lvm'

        - name: Set VM hardware options
          ansible.builtin.shell:
            cmd: |
              qm set {{ base_id }} --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-{{ base_id }}-disk-0
              qm set {{ base_id }} --ide2 local-lvm:cloudinit
              qm set {{ base_id }} --boot c --bootdisk scsi0
              qm set {{ base_id }} --serial0 socket --vga serial0
              qm set {{ base_id }} --agent enabled=1
              qm set {{ base_id }} --sshkeys /tmp/public-ssh-key.pub
              qm set {{ base_id }} --ciuser {{ auth.user }}
              qm set {{ base_id }} --cipassword {{ auth.password }}

        - name: Remove public-ssh-key
          ansible.builtin.file:
            path: /tmp/public-ssh-key.pub
            state: absent

        - name: Set VM as template
          ansible.builtin.shell: 'qm template {{ base_id }}'
      when: result.rc != 0

    - name: Check if VM IDs in vm_list are already in use
      ansible.builtin.shell: 'qm status {{ item.id }}'
      register: result
      loop: '{{ vm_list }}'
      ignore_errors: true
      failed_when: result.rc == 0
      tags: clone-vm
    - name: Clone VM block
      when: result.rc != 0
      tags: clone-vm
      block:
        - name: Clone VM and resize disk
          ansible.builtin.shell:
            cmd: |
              qm clone {{ base_id }} {{ item.id }} --name {{ item.name }} --full
              qm resize {{ item.id }} scsi0 {{ item.disk_size }}
          loop: '{{ vm_list }}'
        - name: Set CPU configuration
          ansible.builtin.shell:
            cmd: |
              qm set {{ item.id }} --cores {{ item.cores }}
          loop: '{{ vm_list }}'
          when: item.cores is defined
        - name: Set Memory configuration
          ansible.builtin.shell:
            cmd: |
              qm set {{ item.id }} --memory {{ item.memory }}
          loop: '{{ vm_list }}'
          when: item.memory is defined
        - name: Set network settings
          ansible.builtin.shell: 'qm set {{ item.id }} --net0 {{ item.net0 }}'
          loop: '{{ vm_list }}'
          when: item.net0 is defined
        - name: Set IP configuration
          ansible.builtin.shell: 'qm set {{ item.id }} --ipconfig0 {{ item.ipconfig0 }}'
          loop: '{{ vm_list }}'
          when: item.ipconfig0 is defined